import{_ as s,o as t,c as a,V as e}from"./chunks/framework.2f867d32.js";const u=JSON.parse('{"title":"本地存储","description":"","frontmatter":{},"headers":[],"relativePath":"lib/helpers/store/index.md","filePath":"lib/helpers/store/index.md","lastUpdated":null}'),o={name:"lib/helpers/store/index.md"},n=e(`<h1 id="本地存储" tabindex="-1">本地存储 <a class="header-anchor" href="#本地存储" aria-label="Permalink to &quot;本地存储&quot;">​</a></h1><p>本地存储（Local storage）是在浏览器本地存储应用数据的好途径。相比较 cookie 拥有更大的存储空间（相同域下一般达到 5M 以上存储空间），使用更灵活，而且不会在每次提交中发送到服务器。几乎所有浏览器都支持本地存储，甚至包括 IE。</p><p>本地存储包括尺寸存储和会话存储，对应的是浏览器内置的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer"><code>localStorage</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage" target="_blank" rel="noreferrer"><code>sessionStorage</code></a>。</p><p>此 JS 插件提供了一系列方法用于读写本地存储数据。相比较直接使用这些浏览器原生接口，<code>Store</code> 类在读写数据时会自动进行转换，所以你可以存储任何可以被系列化为 JSON 的数据，例如数值、数组和复杂对象，而不仅仅是字符串。</p><h2 id="引入" tabindex="-1">引入 <a class="header-anchor" href="#引入" aria-label="Permalink to &quot;引入&quot;">​</a></h2><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {store} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;zui/store&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><p><code>store</code> 为默认的持久存储管理实例，可以直接使用上面的各种方法进行数据操作。如需使用会话存储数据，则只需要通过 <code>store.session</code> 访问会话存储类型的管理实例即可。</p><h2 id="综合示例" tabindex="-1">综合示例 <a class="header-anchor" href="#综合示例" aria-label="Permalink to &quot;综合示例&quot;">​</a></h2><p>（待定：提供一个例子读取示例数据，并提供操作按钮让用户手动添加数据进行存储）</p><h2 id="存储数据" tabindex="-1">存储数据 <a class="header-anchor" href="#存储数据" aria-label="Permalink to &quot;存储数据&quot;">​</a></h2><p>存储数据使用 <code>Store</code> 实例上的 <code>set</code> 方法。</p><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySecretCode&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1314520</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h2 id="读取数据" tabindex="-1">读取数据 <a class="header-anchor" href="#读取数据" aria-label="Permalink to &quot;读取数据&quot;">​</a></h2><p>读取数据使用 <code>Store</code> 实例上的 <code>get</code> 方法。</p><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySecretCode&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 基于存储数据的例子应该返回 1314520</span></span></code></pre></div><h2 id="移除数据" tabindex="-1">移除数据 <a class="header-anchor" href="#移除数据" aria-label="Permalink to &quot;移除数据&quot;">​</a></h2><p>读取数据使用 <code>Store</code> 实例上的 <code>remove</code> 方法。</p><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySecretCode&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h2 id="遍历数据" tabindex="-1">遍历数据 <a class="header-anchor" href="#遍历数据" aria-label="Permalink to &quot;遍历数据&quot;">​</a></h2><p>遍历数据使用 <code>Store</code> 实例上的 <code>each</code> 方法。</p><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">each</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">name</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(name, </span><span style="color:#9ECBFF;">&#39;=&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;value&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h2 id="获取所有数据" tabindex="-1">获取所有数据 <a class="header-anchor" href="#获取所有数据" aria-label="Permalink to &quot;获取所有数据&quot;">​</a></h2><p>获取所有数据使用 <code>Store</code> 实例上的 <code>getAll</code> 方法。</p><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySecretCode&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1314520</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myName&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Jue&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">getAll</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 返回 {mySecretCode: 1314520, myName: &#39;Jue&#39;}</span></span></code></pre></div><h2 id="操作本地会话数据" tabindex="-1">操作本地会话数据 <a class="header-anchor" href="#操作本地会话数据" aria-label="Permalink to &quot;操作本地会话数据&quot;">​</a></h2><p>要操作此次会话在本地的数据可以通过 <code>store.session</code> 实例上的方法。</p><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">store.session.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySecretCode&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1314520</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">store.session.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myName&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;Jue&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">store.session.</span><span style="color:#B392F0;">getAll</span><span style="color:#E1E4E8;">(); </span><span style="color:#6A737D;">// 返回 {mySecretCode: 1314520, myName: &#39;Jue&#39;}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>相比较本地存储，会话存储的数据会在浏览器会话结束时（例如浏览器被关闭）被清除。在会话期间，数据仍然可以跨页面访问。</p></div><h2 id="创建独立的读写实例" tabindex="-1">创建独立的读写实例 <a class="header-anchor" href="#创建独立的读写实例" aria-label="Permalink to &quot;创建独立的读写实例&quot;">​</a></h2><p>通常使用 <code>Store</code> 的默认实例 <code>store</code> 即可读写数据，但有时需要一个独立的存储实例，可以通过 <code>store.create</code> 方法创建一个 <code>Store</code> 实例实现。</p><p><strong>示例</strong></p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">/* 分别创建一个本地存储和会话存储实例 */</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">myStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> store.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;myStore&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mySessionStore</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> store.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySessionStore&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 分别设置同名的存储的值 */</span></span>
<span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySecretCode&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">myStore.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySecretCode&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">mySessionStore.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySecretCode&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">/* 他们可以读取到同名的各自的值 */</span></span>
<span class="line"><span style="color:#E1E4E8;">store.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySecretCode&#39;</span><span style="color:#E1E4E8;">);          </span><span style="color:#6A737D;">// 返回 1</span></span>
<span class="line"><span style="color:#E1E4E8;">myStore.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySecretCode&#39;</span><span style="color:#E1E4E8;">);        </span><span style="color:#6A737D;">// 返回 2</span></span>
<span class="line"><span style="color:#E1E4E8;">mySessionStore.</span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;mySecretCode&#39;</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 返回 3</span></span></code></pre></div><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="c-store" tabindex="-1"><span class="-text-purple-500 -font-mono -bg-purple-100 -px-2 -rounded">C</span> <span class="-text-purple-500 -font-mono">Store</span> <a class="header-anchor" href="#c-store" aria-label="Permalink to &quot;&lt;span class=&quot;-text-purple-500 -font-mono -bg-purple-100 -px-2 -rounded&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;-text-purple-500 -font-mono&quot;&gt;Store&lt;/span&gt;&quot;">​</a></h3><p><code>Store</code> 类。</p><p><strong>属性</strong></p><table><thead><tr><th>名称</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>type</code></td><td style="text-align:center;"><code>StoreType</code></td><td>存储类型</td></tr><tr><td><code>session</code></td><td style="text-align:center;"><code>Store</code></td><td>与当前存储同名的会话存储实例</td></tr></tbody></table><p><strong>方法</strong></p><table><thead><tr><th>方法名</th><th>定义</th></tr></thead><tbody><tr><td><code>get</code></td><td>获取数据</td></tr><tr><td><code>set</code></td><td>存储数据</td></tr><tr><td><code>remove</code></td><td>移除数据</td></tr><tr><td><code>each</code></td><td>遍历数据</td></tr><tr><td><code>getAll</code></td><td>获取所有数据</td></tr></tbody></table><h3 id="f-store-set-key-value" tabindex="-1"><span class="-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded">F</span> <span class="-text-blue-500 -font-mono">Store.set(key, value)</span> <a class="header-anchor" href="#f-store-set-key-value" aria-label="Permalink to &quot;&lt;span class=&quot;-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;-text-blue-500 -font-mono&quot;&gt;Store.set(key, value)&lt;/span&gt;&quot;">​</a></h3><p>存储数据。</p><p><strong>定义</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(key: string, value: any) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key</code></td><td style="text-align:center;"><code>string</code></td><td>存储的数据名称</td></tr><tr><td><code>value</code></td><td style="text-align:center;"><code>any</code></td><td>要存储的数据</td></tr></tbody></table><p><strong>方法</strong></p><h3 id="f-store-get-key-defaultvalue" tabindex="-1"><span class="-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded">F</span> <span class="-text-blue-500 -font-mono">Store.get(key, defaultValue)</span> <a class="header-anchor" href="#f-store-get-key-defaultvalue" aria-label="Permalink to &quot;&lt;span class=&quot;-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;-text-blue-500 -font-mono&quot;&gt;Store.get(key, defaultValue)&lt;/span&gt;&quot;">​</a></h3><p>读取数据。</p><p><strong>定义</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">(key: string, defaultValue</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> any) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> any;</span></span></code></pre></div><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key</code></td><td style="text-align:center;"><code>string</code></td><td>读取的数据名称</td></tr><tr><td><code>defaultValue</code></td><td style="text-align:center;"><code>any</code></td><td>当没有读取数据时返回此默认值</td></tr></tbody></table><p><strong>返回值</strong></p><table><thead><tr><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td style="text-align:center;"><code>any</code></td><td>读取到的数据</td></tr></tbody></table><h3 id="f-store-remove-key" tabindex="-1"><span class="-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded">F</span> <span class="-text-blue-500 -font-mono">Store.remove(key)</span> <a class="header-anchor" href="#f-store-remove-key" aria-label="Permalink to &quot;&lt;span class=&quot;-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;-text-blue-500 -font-mono&quot;&gt;Store.remove(key)&lt;/span&gt;&quot;">​</a></h3><p>移除数据</p><p><strong>定义</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">remove</span><span style="color:#E1E4E8;">(key: string) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key</code></td><td style="text-align:center;"><code>string</code></td><td>要移除的数据名称</td></tr></tbody></table><h3 id="f-store-each-callback" tabindex="-1"><span class="-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded">F</span> <span class="-text-blue-500 -font-mono">Store.each(callback)</span> <a class="header-anchor" href="#f-store-each-callback" aria-label="Permalink to &quot;&lt;span class=&quot;-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;-text-blue-500 -font-mono&quot;&gt;Store.each(callback)&lt;/span&gt;&quot;">​</a></h3><p>遍历数据。</p><p><strong>定义</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">each</span><span style="color:#E1E4E8;">(callback: (</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">value</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">any</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>callback</code></td><td style="text-align:center;"><code>function</code></td><td>遍历回调函数</td></tr></tbody></table><p>其中 <code>callback</code> 参数：</p><table><thead><tr><th>参数</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>name</code></td><td style="text-align:center;"><code>string</code></td><td>本次遍历存储的名称</td></tr><tr><td><code>value</code></td><td style="text-align:center;"><code>any</code></td><td>本次遍历存储的值</td></tr></tbody></table><h3 id="f-store-getall" tabindex="-1"><span class="-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded">F</span> <span class="-text-blue-500 -font-mono">Store.getAll()</span> <a class="header-anchor" href="#f-store-getall" aria-label="Permalink to &quot;&lt;span class=&quot;-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;-text-blue-500 -font-mono&quot;&gt;Store.getAll()&lt;/span&gt;&quot;">​</a></h3><p>获取所有存储的数据。</p><p><strong>定义</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">getAll</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> Record</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">string, any</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><p><strong>返回值</strong></p><table><thead><tr><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Record&lt;string, any&gt;</code></td><td>通过一个对象返回所有存储的数据，对象的属性名和值分别对应存储的名称和值</td></tr></tbody></table><h3 id="t-storetype" tabindex="-1"><span class="-text-green-500 -font-mono -bg-green-100 -px-2 -rounded">T</span> <span class="-text-green-500 -font-mono">StoreType</span> <a class="header-anchor" href="#t-storetype" aria-label="Permalink to &quot;&lt;span class=&quot;-text-green-500 -font-mono -bg-green-100 -px-2 -rounded&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;-text-green-500 -font-mono&quot;&gt;StoreType&lt;/span&gt;&quot;">​</a></h3><p>本地存储类型。</p><p><strong>定义</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StoreType</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;local&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;session&#39;</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><p><strong>常量定义</strong></p><table><thead><tr><th>值</th><th>定义</th></tr></thead><tbody><tr><td><code>&#39;local&#39;</code></td><td>本地持久存储</td></tr><tr><td><code>&#39;session&#39;</code></td><td>本地会话存储</td></tr></tbody></table><h3 id="v-store" tabindex="-1"><span class="-text-yellow-500 -font-mono -bg-yellow-100 -px-2 -rounded">V</span> <span class="-text-yellow-500 -font-mono">store</span> <a class="header-anchor" href="#v-store" aria-label="Permalink to &quot;&lt;span class=&quot;-text-yellow-500 -font-mono -bg-yellow-100 -px-2 -rounded&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;-text-yellow-500 -font-mono&quot;&gt;store&lt;/span&gt;&quot;">​</a></h3><p>默认的 store 实例，并包含用于创建新的 <code>Store</code> 实例的快捷方法。</p><p><strong>定义</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> store</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Store</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&amp;</span><span style="color:#E1E4E8;"> {</span><span style="color:#FFAB70;">create</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StoreCreateFunc</span><span style="color:#E1E4E8;">}</span></span></code></pre></div><p>其中 <code>create</code> 成员为创建 <code>Store</code> 实例的快捷方法。</p><h3 id="f-storecreatefunc" tabindex="-1"><span class="-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded">F</span> <span class="-text-blue-500 -font-mono">StoreCreateFunc</span> <a class="header-anchor" href="#f-storecreatefunc" aria-label="Permalink to &quot;&lt;span class=&quot;-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded&quot;&gt;F&lt;/span&gt; &lt;span class=&quot;-text-blue-500 -font-mono&quot;&gt;StoreCreateFunc&lt;/span&gt;&quot;">​</a></h3><p><code>Store</code> 实例创建方法。</p><p><strong>定义</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StoreCreateFunc</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">name</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">type</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">StoreType</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;local&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Store</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>name</code></td><td style="text-align:center;"><code>string</code></td><td>本地存储实例名称</td></tr><tr><td><code>type</code></td><td style="text-align:center;"><code>StoreType</code></td><td>存储类型，默认为 <code>&#39;local&#39;</code></td></tr></tbody></table>`,97),l=[n];function p(r,c,d,y,E,i){return t(),a("div",null,l)}const h=s(o,[["render",p]]);export{u as __pageData,h as default};
