import{_ as s,o as a,c as n,g as e}from"./app.ee233add.js";const b=JSON.parse('{"title":"组件库扩展","description":"","frontmatter":{},"headers":[{"level":2,"title":"定义扩展库","slug":"定义扩展库","link":"#定义扩展库","children":[]},{"level":2,"title":"添加扩展库","slug":"添加扩展库","link":"#添加扩展库","children":[]},{"level":2,"title":"启动开发服务","slug":"启动开发服务","link":"#启动开发服务","children":[]},{"level":2,"title":"启动文档服务器","slug":"启动文档服务器","link":"#启动文档服务器","children":[]},{"level":2,"title":"监听扩展库文件变更","slug":"监听扩展库文件变更","link":"#监听扩展库文件变更","children":[]},{"level":2,"title":"打包","slug":"打包","link":"#打包","children":[]}],"relativePath":"guide/customize/exts-lib.md","lastUpdated":null}'),l={name:"guide/customize/exts-lib.md"},p=e(`<h1 id="组件库扩展" tabindex="-1">组件库扩展 <a class="header-anchor" href="#组件库扩展" aria-hidden="true">#</a></h1><p>ZUI3 组件库内置了大量组件，并支持集中开发、调试和打包，其中打包还支持只选择指定的组件进行个性化定制，同步输出组件库文档。但当需求扩展到组件库之外时，就需要用到扩展组件库了。ZUI3 支持扩展组件库模式，可以从其他位置引入一个或多个组件库目录，享受集中开发、调试和打包。下面介绍扩展组件库的使用方法。</p><h2 id="定义扩展库" tabindex="-1">定义扩展库 <a class="header-anchor" href="#定义扩展库" aria-hidden="true">#</a></h2><p>扩展组件库可以来自本地系统的任意位置，只需要提供一个路径，例如：</p><div class="language-txt line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#c9d1d9;">/Users/TaiJi/Projects/zui3_exts/lib/</span></span>
<span class="line"><span style="color:#c9d1d9;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>扩展组件库的目录结构与 ZUI3 <code>/lib/</code> 下的目录结构一致，下面的每个子目录为一个独立的组件，详细定义参考 <a href="/zui/3/guide/customize/dev.html">开发文档</a>。</p><h2 id="添加扩展库" tabindex="-1">添加扩展库 <a class="header-anchor" href="#添加扩展库" aria-hidden="true">#</a></h2><p>在 <code>zui3</code> 项目根目录执行：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">$</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">pnpm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">extend-lib</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">--</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">&lt;</span><span style="color:#A5D6FF;">ext_lib_pat</span><span style="color:#C9D1D9;">h</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">&lt;</span><span style="color:#A5D6FF;">lib_nam</span><span style="color:#C9D1D9;">e</span><span style="color:#FF7B72;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中参数 <code>ext_lib_path</code> 为扩展组件库路径，<code>&lt;lib_name&gt;</code> 为扩展组件库名称。例如：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">$</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">pnpm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">extend-lib</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">--</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">/Users/TaiJi/Projects/zui3_exts/lib/</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">zentao</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>执行上述命令之后，会将组件库目录文件拷贝到 <code>zui3/lib_name</code> 目录下，同时会在 <code>zui3/exts/libs.json</code> 文件中记录此扩展库的名称和路径。</p><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">{</span></span>
<span class="line"><span style="color:#C9D1D9;">    </span><span style="color:#7EE787;">&quot;zentao&quot;</span><span style="color:#C9D1D9;">: </span><span style="color:#A5D6FF;">&quot;/Users/TaiJi/Projects/zui3_exts/lib/*&quot;</span></span>
<span class="line"><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>实际上，你也可以通过自己编辑这个文件来添加扩展库。</p><h2 id="启动开发服务" tabindex="-1">启动开发服务 <a class="header-anchor" href="#启动开发服务" aria-hidden="true">#</a></h2><p>要在开发模式中包含对扩展组件库的开发调试，只需要执行如下命令代替 <code>pnpm dev</code> 命令即可：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">$</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">pnpm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">dev:exts</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="启动文档服务器" tabindex="-1">启动文档服务器 <a class="header-anchor" href="#启动文档服务器" aria-hidden="true">#</a></h2><p>要在文档网站服务模式中包含对扩展组件库的文档支持，只需要如下命令代替 <code>pnpm docs:dev</code> 命令即可：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">$</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">pnpm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">docs:dev:exts</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="监听扩展库文件变更" tabindex="-1">监听扩展库文件变更 <a class="header-anchor" href="#监听扩展库文件变更" aria-hidden="true">#</a></h2><p>在启动开发服务和文档服务器时，通常需要对扩展组件库原始目录进行监听，并将变更同步到 ZUI3 的扩展库目录，这时需要执行如下命令即可：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">$</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">pnpm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">watch-exts</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上述命令需要一直保持运行才能让监听和同步生效，当扩展库原始目录文件变更时会自动同步到 <code>zui3/exts/</code> 目录，如果同时有启动开发服务器和文档服务器时，热更新功能将会对扩展组件库生效。</p><h2 id="打包" tabindex="-1">打包 <a class="header-anchor" href="#打包" aria-hidden="true">#</a></h2><p>打包时如果需要将扩展库中的组件也进行打包，则需要添加 <code>--exts</code> 参数，然后就可以在需要打包的组件清单中指定扩展库中的组件名称：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">$</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">pnpm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">build</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">--</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">label</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">@zentao/status-label</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">--exts</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果不指定名称，则默认打包仍然只打包内置组件库的组件，例如下面的命令仍然相当于 <code>pnpm build</code>：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">$</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">pnpm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">build</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">--</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">--exts</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果需要将所有内置组件库和扩展库中的所有组件一并打包，可以使用如下命令：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FFA657;">$</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">pnpm</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">build</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">--</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">zui+exts</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">--exts</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">--name=zentao</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,31),o=[p];function t(c,r,i,d,u,y){return a(),n("div",null,o)}const D=s(l,[["render",t]]);export{b as __pageData,D as default};
