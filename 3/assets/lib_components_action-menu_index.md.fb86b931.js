import{_ as c,H as r,o as i,c as E,J as l,E as e,C as a,a as n,V as p}from"./chunks/framework.5abe4bce.js";const d={mounted(){onZUIReady(()=>{const t=new zui.ActionMenu("#actionMenu",{className:"row gap-3 items-center",items:[{title:"复制",icon:"icon-copy"},{title:"粘贴",icon:"icon-paste"},{text:"剪切"},{type:"heading",title:"更多操作"},{title:"导入",icon:"icon-upload-alt"},{title:"导出",icon:"icon-download-alt"},{title:"保存",icon:"icon-save",onClick:s=>console.log("> menuItem.clicked",s)}],itemProps:{item:{className:"flex-inline row items-center gap-2 state"}},onClickItem:s=>{console.log("> actionMenu.onClickItem",s)}});console.log("> actionMenu",t),new zui.ActionMenu("#navExample",{name:"nav",items:[{text:"首页",icon:"icon-home"},{text:"动态"},{text:"论坛"},{type:"divider"},{text:"博客",icon:"icon-rss"},{text:"关注我们",icon:"icon-group"}],onClickItem:s=>{console.log("> nav.onClickItem",s)}}),new zui.ActionMenuNested("#nestedActionMenu",{nestedTrigger:"click",items:[{type:"heading",text:"更多操作"},{text:"导入",icon:"icon-upload-alt"},{text:"导出",icon:"icon-download-alt"},{text:"保存",icon:"icon-save",onClick:s=>console.log("> menuItem.clicked",s),items:[{text:"保存到云端"},{text:"下载到本地",items:[{text:"下载为 PDF"},{text:"下载为 Excel"}]}]}],onClickItem:s=>{console.log("> menu.onClickItem",s)}}),new zui.ActionMenu("#actionMenuItemRender",{className:"row gap-3 items-center",items:[{title:"复制",icon:"icon-copy"},{title:"粘贴",icon:"icon-paste"},{text:"剪切"}],itemRender:s=>{s.text="itemRender"}})})}},I=JSON.parse('{"title":"操作菜单","description":"","frontmatter":{},"headers":[],"relativePath":"lib/components/action-menu/index.md","filePath":"lib/components/action-menu/index.md","lastUpdated":null}'),y=a("h1",{id:"操作菜单",tabindex:"-1"},[n("操作菜单 "),a("a",{class:"header-anchor",href:"#操作菜单","aria-label":'Permalink to "操作菜单"'},"​")],-1),h=a("p",null,"操作菜单是一个不包含具体外观的通用组件，需要通过 JS 动态调用，通常用于构建更复杂的组件，例如菜单、工具栏、列表等。",-1),u=a("h2",{id:"示例",tabindex:"-1"},[n("示例 "),a("a",{class:"header-anchor",href:"#示例","aria-label":'Permalink to "示例"'},"​")],-1),m=a("p",null,[n("通过构造一个 "),a("code",null,"ActionMenu"),n(" 实例，在一个空的 "),a("code",null,"<div>"),n(" 元素上创建一个菜单。")],-1),F=a("div",{id:"actionMenu"},null,-1),b=p(`<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;actionMenu&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">actionMenu</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActionMenu</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#actionMenu&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    className: </span><span style="color:#9ECBFF;">&#39;row gap-3 items-center&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    items: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {title: </span><span style="color:#9ECBFF;">&#39;复制&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-copy&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {title: </span><span style="color:#9ECBFF;">&#39;粘贴&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-paste&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {text: </span><span style="color:#9ECBFF;">&#39;剪切&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {type: </span><span style="color:#9ECBFF;">&#39;heading&#39;</span><span style="color:#E1E4E8;">, title: </span><span style="color:#9ECBFF;">&#39;更多操作&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {title: </span><span style="color:#9ECBFF;">&#39;导入&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-upload-alt&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {title: </span><span style="color:#9ECBFF;">&#39;导出&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-download-alt&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {title: </span><span style="color:#9ECBFF;">&#39;保存&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-save&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">onClick</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&gt; menuItem.clicked&#39;</span><span style="color:#E1E4E8;">, event)},</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    itemProps: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        item: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            className: </span><span style="color:#9ECBFF;">&#39;flex-inline row items-center gap-2 state&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onClickItem</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&gt; actionMenu.onClickItem&#39;</span><span style="color:#E1E4E8;">, info);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&gt; actionMenu&#39;</span><span style="color:#E1E4E8;">, actionMenu);</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="引入" tabindex="-1">引入 <a class="header-anchor" href="#引入" aria-label="Permalink to &quot;引入&quot;">​</a></h2><h3 id="通过-npm" tabindex="-1">通过 npm <a class="header-anchor" href="#通过-npm" aria-label="Permalink to &quot;通过 npm&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {ActionMenu} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;zui/action-menu&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">menu</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActionMenu</span><span style="color:#E1E4E8;">(element, options);</span></span></code></pre></div><h3 id="通过全局对象-zui" tabindex="-1">通过全局对象 <code>zui</code> <a class="header-anchor" href="#通过全局对象-zui" aria-label="Permalink to &quot;通过全局对象 \`zui\`&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">menu</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> zui.</span><span style="color:#B392F0;">ActionMenu</span><span style="color:#E1E4E8;">(element, options);</span></span></code></pre></div><h3 id="使用-react-组件" tabindex="-1">使用 React 组件 <a class="header-anchor" href="#使用-react-组件" aria-label="Permalink to &quot;使用 React 组件&quot;">​</a></h3><div class="language-jsx"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {render} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;react&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {ActionMenu} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;zui/action-menu/react&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(element, &lt;</span><span style="color:#79B8FF;">ActionMenu</span><span style="color:#E1E4E8;"> {</span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">options} /&gt;);</span></span></code></pre></div><h3 id="使用-jquery-扩展" tabindex="-1">使用 jQuery 扩展 <a class="header-anchor" href="#使用-jquery-扩展" aria-label="Permalink to &quot;使用 jQuery 扩展&quot;">​</a></h3><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(element).</span><span style="color:#B392F0;">actionmenu</span><span style="color:#E1E4E8;">(options);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">actionMenu</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">$</span><span style="color:#E1E4E8;">(element).</span><span style="color:#B392F0;">data</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;zui.actionmenu&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre></div><h2 id="更新菜单项" tabindex="-1">更新菜单项 <a class="header-anchor" href="#更新菜单项" aria-label="Permalink to &quot;更新菜单项&quot;">​</a></h2><p>调用菜单组件实例上的 <code>render</code> 方法来更新菜单项，并重新进行渲染：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">actionMenu.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    items: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// ... 新的菜单项</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ... 可以传入其他新的选项</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h2 id="动态菜单项" tabindex="-1">动态菜单项 <a class="header-anchor" href="#动态菜单项" aria-label="Permalink to &quot;动态菜单项&quot;">​</a></h2><p>将选项 <code>items</code> 设置为一个函数，当需要显示菜单时会调用此函数来创建新的菜单项列表。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActionMenu</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#actionMenu&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">items</span><span style="color:#E1E4E8;">: () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">itemList</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">            {title: </span><span style="color:#9ECBFF;">&#39;剪切&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">            {title: </span><span style="color:#9ECBFF;">&#39;复制&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-copy&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        ];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (clipboardHasContent) {</span></span>
<span class="line"><span style="color:#E1E4E8;">            itemList.</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">({title: </span><span style="color:#9ECBFF;">&#39;粘贴&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-paste&#39;</span><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> itemList;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre></div><h2 id="监听点击事件" tabindex="-1">监听点击事件 <a class="header-anchor" href="#监听点击事件" aria-label="Permalink to &quot;监听点击事件&quot;">​</a></h2><h3 id="onclickitem" tabindex="-1"><code>onClickItem</code> <a class="header-anchor" href="#onclickitem" aria-label="Permalink to &quot;\`onClickItem\`&quot;">​</a></h3><p><strong>参数对象：</strong></p><ul><li><code>event</code>：事件对象</li><li><code>item</code>：当前点击的单项数据</li><li><code>index</code></li><li><code>menu</code>：组件信息</li></ul><h2 id="多层级菜单" tabindex="-1">多层级菜单 <a class="header-anchor" href="#多层级菜单" aria-label="Permalink to &quot;多层级菜单&quot;">​</a></h2>`,21),g=a("div",{id:"nestedActionMenu"},null,-1),C=p(`<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;nestedActionMenu&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> zui.</span><span style="color:#B392F0;">ActionMenuNested</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#nestedActionMenu&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    nestedTrigger: </span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    items: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {type: </span><span style="color:#9ECBFF;">&#39;heading&#39;</span><span style="color:#E1E4E8;">, text: </span><span style="color:#9ECBFF;">&#39;更多操作&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {text: </span><span style="color:#9ECBFF;">&#39;导入&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-upload-alt&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {type: </span><span style="color:#9ECBFF;">&#39;divider&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {text: </span><span style="color:#9ECBFF;">&#39;导出&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-download-alt&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {</span></span>
<span class="line"><span style="color:#E1E4E8;">            text: </span><span style="color:#9ECBFF;">&#39;保存&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-save&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#B392F0;">onClick</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&gt; menuItem.clicked&#39;</span><span style="color:#E1E4E8;">, event),</span></span>
<span class="line"><span style="color:#E1E4E8;">            items: [</span></span>
<span class="line"><span style="color:#E1E4E8;">                {text: </span><span style="color:#9ECBFF;">&#39;保存到云端&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    text: </span><span style="color:#9ECBFF;">&#39;下载到本地&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                    items: [</span></span>
<span class="line"><span style="color:#E1E4E8;">                        {text: </span><span style="color:#9ECBFF;">&#39;下载为 PDF&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                        {text: </span><span style="color:#9ECBFF;">&#39;下载为 Excel&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">                    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">                },</span></span>
<span class="line"><span style="color:#E1E4E8;">            ],</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onClickItem</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&gt; menu.onClickItem&#39;</span><span style="color:#E1E4E8;">, info);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="基于此创建新组件" tabindex="-1">基于此创建新组件 <a class="header-anchor" href="#基于此创建新组件" aria-label="Permalink to &quot;基于此创建新组件&quot;">​</a></h2><p>通过继承 <a href="https://github.com/easysoft/zui/blob/zui3_dev/lib/action-menu/src/component/action-menu.tsx" target="_blank" rel="noreferrer">ActionMenu 组件</a> 类来创建一个新的 JS 组件，例如创建一个导航：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">class</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Nav</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">extends</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActionMenu</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// ...此处可选的对 ActionMenu 成员进行重写</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div>`,4),k=a("div",{id:"navExample"},null,-1),B=p(`<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;navExample&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">nav</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Nav</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#navExample&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// name: &#39;nav&#39;, // 不再需要，会自动根据 Nav 类名使用 \`nav\` 作为组件类名</span></span>
<span class="line"><span style="color:#E1E4E8;">    items: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {text: </span><span style="color:#9ECBFF;">&#39;首页&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-home&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {text: </span><span style="color:#9ECBFF;">&#39;动态&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {text: </span><span style="color:#9ECBFF;">&#39;论坛&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {type: </span><span style="color:#9ECBFF;">&#39;divider&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {text: </span><span style="color:#9ECBFF;">&#39;博客&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-rss&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {text: </span><span style="color:#9ECBFF;">&#39;关注我们&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-group&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    ],</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">onClickItem</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&gt; nav.onClickItem&#39;</span><span style="color:#E1E4E8;">, info);</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&gt; nav&#39;</span><span style="color:#E1E4E8;">, nav);</span></span>
<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="构造方法" tabindex="-1">构造方法 <a class="header-anchor" href="#构造方法" aria-label="Permalink to &quot;构造方法&quot;">​</a></h2><p><strong>定义：</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">constructor</span><span style="color:#E1E4E8;">(element: HTMLElement </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> string, options: ActionMenuOptions);</span></span></code></pre></div><p><strong>参数：</strong></p><ul><li><code>element</code>：指定用于创建菜单的容器元素，或者通过字符串指定用于查找容器元素的选择器</li><li><code>options</code>：指定选项</li></ul><p><strong>示例：</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActionMenu</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#menu&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">    items: [</span></span>
<span class="line"><span style="color:#E1E4E8;">        {title: </span><span style="color:#9ECBFF;">&#39;复制&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-copy&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        {title: </span><span style="color:#9ECBFF;">&#39;粘贴&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-paste&#39;</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">    ]</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre></div><h2 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-label="Permalink to &quot;选项&quot;">​</a></h2><h3 id="classname" tabindex="-1"><code>className</code> <a class="header-anchor" href="#classname" aria-label="Permalink to &quot;\`className\`&quot;">​</a></h3><p>类名。</p><ul><li>类型：<code>string | object | array</code>；</li><li>必选：否。</li></ul><h3 id="hasicons" tabindex="-1"><code>hasIcons</code> <a class="header-anchor" href="#hasicons" aria-label="Permalink to &quot;\`hasIcons\`&quot;">​</a></h3><p>指定操作菜单项中是否包含左侧图标（方便对图标和文本进行对齐），当此选项为空时会自动根据实际项进行判断。</p><ul><li>类型：<code>boolean</code>。</li></ul><h3 id="name" tabindex="-1"><code>name</code> <a class="header-anchor" href="#name" aria-label="Permalink to &quot;\`name\`&quot;">​</a></h3><p>自定义生成的操作菜单类名。</p><ul><li>类型：<code>string</code>；</li><li>必选：否。</li></ul><h3 id="items" tabindex="-1"><code>items</code> <a class="header-anchor" href="#items" aria-label="Permalink to &quot;\`items\`&quot;">​</a></h3><p>定义菜单项列表，可以通过一个函数动态返回菜单项列表。</p><ul><li>类型：<code><a href="#actionmenuitemoptions">ActionMenuItemOptions</a></code>；</li><li>必选：是。</li></ul><h3 id="children" tabindex="-1"><code>children</code> <a class="header-anchor" href="#children" aria-label="Permalink to &quot;\`children\`&quot;">​</a></h3><p>子项内容。</p><ul><li>类型：<code>ComponentChildren</code>；</li><li>必选：否。</li></ul><h3 id="itemrender" tabindex="-1"><code>itemRender</code> <a class="header-anchor" href="#itemrender" aria-label="Permalink to &quot;\`itemRender\`&quot;">​</a></h3><p>指定一个回调函数用于对组件渲染进行自定义。</p><ul><li>类型：<code>Record&lt;string, ComponentType&gt; | ActionMenuItemRender&lt;T&gt;</code>；</li><li>必选：否。</li></ul><p>该回调函数不同内容拥有不同的行为：</p><ul><li><code>Partial&lt;[MenuListItem]&gt;</code>：对原列表项定义对象进行修改；</li><li><code>react.ComponentChildren</code>：返回自定义渲染内容；</li><li><code>undefined</code>：不对默认渲染行为进行干预。</li></ul><p><strong>参数</strong></p><ul><li><code>key</code>：键值；</li><li>其他数据：每个子项的信息。</li></ul>`,31),q=a("div",{id:"actionMenuItemRender"},null,-1),x=p('<div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">=</span><span style="color:#9ECBFF;">&quot;actionMenuItemRender&quot;</span><span style="color:#E1E4E8;">&gt;&lt;/</span><span style="color:#85E89D;">div</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">actionMenuItemRender</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> zui.</span><span style="color:#B392F0;">ActionMenu</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;#actionMenuItemRender&#39;</span><span style="color:#E1E4E8;">, {</span></span>\n<span class="line"><span style="color:#E1E4E8;">    className: </span><span style="color:#9ECBFF;">&#39;row gap-3 items-center&#39;</span><span style="color:#E1E4E8;">,</span></span>\n<span class="line"><span style="color:#E1E4E8;">    items: [</span></span>\n<span class="line"><span style="color:#E1E4E8;">        {title: </span><span style="color:#9ECBFF;">&#39;复制&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-copy&#39;</span><span style="color:#E1E4E8;">},</span></span>\n<span class="line"><span style="color:#E1E4E8;">        {title: </span><span style="color:#9ECBFF;">&#39;粘贴&#39;</span><span style="color:#E1E4E8;">, icon: </span><span style="color:#9ECBFF;">&#39;icon-paste&#39;</span><span style="color:#E1E4E8;">},</span></span>\n<span class="line"><span style="color:#E1E4E8;">        {text: </span><span style="color:#9ECBFF;">&#39;剪切&#39;</span><span style="color:#E1E4E8;">},</span></span>\n<span class="line"><span style="color:#E1E4E8;">    ],</span></span>\n<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">itemRender</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">e</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>\n<span class="line"><span style="color:#E1E4E8;">        e.text </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;itemRender&#39;</span><span style="color:#E1E4E8;">;</span></span>\n<span class="line"><span style="color:#E1E4E8;">    },</span></span>\n<span class="line"><span style="color:#E1E4E8;">});</span></span>\n<span class="line"><span style="color:#E1E4E8;">&lt;/</span><span style="color:#85E89D;">script</span><span style="color:#E1E4E8;">&gt;</span></span></code></pre></div><h3 id="onclickitem-1" tabindex="-1"><code>onClickItem</code> <a class="header-anchor" href="#onclickitem-1" aria-label="Permalink to &quot;`onClickItem`&quot;">​</a></h3><p>操作菜单的点击回调事件。</p><h3 id="itemrender-1" tabindex="-1"><code>itemRender</code> <a class="header-anchor" href="#itemrender-1" aria-label="Permalink to &quot;`itemRender`&quot;">​</a></h3><p>指定一个回调函数用于对组件渲染进行自定义。</p><p><strong>参数</strong>：<code>items</code> 选项的单个配置；</p><p><strong>返回值</strong>：<code>items</code> 选项的单个配置。</p><h3 id="beforerender" tabindex="-1"><code>beforeRender</code> <a class="header-anchor" href="#beforerender" aria-label="Permalink to &quot;`beforeRender`&quot;">​</a></h3><p>指定一个回调函数在渲染之前调用，可重新配置组件选项。</p><p><strong>参数</strong>：用户为按钮组组件件设置的 <code>options</code>；</p><p><strong>返回值</strong>：组件选项数据。</p><h3 id="afterrender" tabindex="-1"><code>afterRender</code> <a class="header-anchor" href="#afterrender" aria-label="Permalink to &quot;`afterRender`&quot;">​</a></h3><p>指定一个回调函数在渲染之后调用。</p><p><strong>参数：</strong></p><ul><li><code>firstRender</code>：判断是否第一次渲染；</li><li><code>menu</code>：组件信息。</li></ul><h3 id="beforedestroy" tabindex="-1"><code>beforeDestroy</code> <a class="header-anchor" href="#beforedestroy" aria-label="Permalink to &quot;`beforeDestroy`&quot;">​</a></h3><p>指定一个回调函数在组件销毁之前调用，无参数。</p><h2 id="方法" tabindex="-1">方法 <a class="header-anchor" href="#方法" aria-label="Permalink to &quot;方法&quot;">​</a></h2><h3 id="render" tabindex="-1"><code>render</code> <a class="header-anchor" href="#render" aria-label="Permalink to &quot;`render`&quot;">​</a></h3><p>重新渲染，可以指定新的选项。</p><p><strong>定义：</strong></p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(options: Partial</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">ActionMenuOptions</span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;">): </span><span style="color:#F97583;">void</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><p><strong>参数：</strong></p><ul><li><code>options</code>：需要重新设置的选项。</li></ul><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h2><h3 id="actionmenuitemoptions" tabindex="-1"><code>ActionMenuItemOptions</code> <a class="header-anchor" href="#actionmenuitemoptions" aria-label="Permalink to &quot;`ActionMenuItemOptions`&quot;">​</a></h3><p><code>ActionMenuItemOptions</code> 由 <code><a href="#actiondividerprops">ActionDividerProps</a></code>、<code><a href="#actionitemprops">ActionItemProps</a></code>、<code><a href="#actionspaceprops">ActionSpaceProps</a></code>、<code><a href="#actionheadingprops">ActionHeadingProps</a></code>、<code><a href="#actioncustomprops">ActionCustomProps</a></code>五部分构成。</p><h4 id="actionbasicprops" tabindex="-1"><code>ActionBasicProps</code> <a class="header-anchor" href="#actionbasicprops" aria-label="Permalink to &quot;`ActionBasicProps`&quot;">​</a></h4><p>基础属性。</p><h5 id="type" tabindex="-1"><code>type</code> <a class="header-anchor" href="#type" aria-label="Permalink to &quot;`type`&quot;">​</a></h5><p>指定 item 的类型。</p><ul><li>类型：<code>string</code>；</li><li>必选：否。</li></ul><h5 id="classname-1" tabindex="-1"><code>className</code> <a class="header-anchor" href="#classname-1" aria-label="Permalink to &quot;`className`&quot;">​</a></h5><p>类名。</p><ul><li>类型：<code>string | object | array</code>；</li><li>必选：否。</li></ul><h5 id="style" tabindex="-1"><code>style</code> <a class="header-anchor" href="#style" aria-label="Permalink to &quot;`style`&quot;">​</a></h5><p>样式。</p><ul><li>类型：<code>ClassNameLike</code>；</li><li>必选：否。</li></ul><h5 id="onclick" tabindex="-1"><code>onClick</code> <a class="header-anchor" href="#onclick" aria-label="Permalink to &quot;`onClick`&quot;">​</a></h5><p>鼠标点击的回调方法。</p><ul><li>类型：<code>function</code>；</li><li>必选：否。</li></ul><h5 id="rootclass" tabindex="-1"><code>rootClass</code> <a class="header-anchor" href="#rootclass" aria-label="Permalink to &quot;`rootClass`&quot;">​</a></h5><p>与 <code>action-menu-item</code> 同级类名。</p><ul><li>类型：<code>string</code>；</li><li>必选：否。</li></ul><h5 id="rootattrs" tabindex="-1"><code>rootAttrs</code> <a class="header-anchor" href="#rootattrs" aria-label="Permalink to &quot;`rootAttrs`&quot;">​</a></h5><p>指定 <code>action-menu-item</code> 属性。</p><ul><li>类型：<code>JSX.HTMLAttributes&lt;HTMLLIElement&gt;</code>；</li><li>必选：否。</li></ul><h5 id="rootstyle" tabindex="-1"><code>rootStyle</code> <a class="header-anchor" href="#rootstyle" aria-label="Permalink to &quot;`rootStyle`&quot;">​</a></h5><p>指定 <code>action-menu-item</code> 样式。</p><ul><li>类型：<code>JSX.CSSProperties</code>；</li><li>必选：否。</li></ul><h5 id="rootchildren" tabindex="-1"><code>rootChildren</code> <a class="header-anchor" href="#rootchildren" aria-label="Permalink to &quot;`rootChildren`&quot;">​</a></h5><p>为 <code>action-menu-item</code> 添加子元素。</p><ul><li>类型：<code>ComponentChildren | (() =&gt; ComponentChildren)</code>；</li><li>必选：否。</li></ul><h5 id="rootprops" tabindex="-1"><code>rootProps</code> <a class="header-anchor" href="#rootprops" aria-label="Permalink to &quot;`rootProps`&quot;">​</a></h5><p>根节点自定义属性对象。</p><ul><li>类型：<code>object</code>；</li><li>必选：否。</li></ul><h5 id="key" tabindex="-1"><code>key</code> <a class="header-anchor" href="#key" aria-label="Permalink to &quot;`key`&quot;">​</a></h5><p>指定单个按钮键值，用户可根据该属性进行特殊处理。</p><ul><li>类型：<code>string | number | symbol</code>；</li><li>必选：否。</li></ul><h5 id="attrs" tabindex="-1"><code>attrs</code> <a class="header-anchor" href="#attrs" aria-label="Permalink to &quot;`attrs`&quot;">​</a></h5><p>指定当前子项的属性。</p><ul><li>类型：<code>JSX.HTMLAttributes&lt;HTMLLIElement&gt;</code>；</li><li>必选：否。</li></ul><h5 id="children-1" tabindex="-1"><code>children</code> <a class="header-anchor" href="#children-1" aria-label="Permalink to &quot;`children`&quot;">​</a></h5><p>指定当前子项的子元素。</p><ul><li>类型：<code>ComponentChildren | (() =&gt; ComponentChildren)</code>；</li><li>必选：否。</li></ul><h5 id="component" tabindex="-1"><code>component</code> <a class="header-anchor" href="#component" aria-label="Permalink to &quot;`component`&quot;">​</a></h5><p>指定当前元素的标签名。</p><ul><li>类型：<code>string | ComponentType</code>；</li><li>必选：否。</li></ul><h4 id="actiondividerprops" tabindex="-1"><code>ActionDividerProps</code> <a class="header-anchor" href="#actiondividerprops" aria-label="Permalink to &quot;`ActionDividerProps`&quot;">​</a></h4><p>类型为分割线的 API 在<a href="#actionbasicprops">ActionBasicProps</a> 的基础上定义了 <code>type</code> 属性。</p><h5 id="type-1" tabindex="-1"><code>type</code> <a class="header-anchor" href="#type-1" aria-label="Permalink to &quot;`type`&quot;">​</a></h5><p>item 为分割线时的类型。</p><ul><li>类型：<code>string</code>；</li><li>属性值：<code>divider</code>。</li></ul><h4 id="actionitemprops" tabindex="-1"><code>ActionItemProps</code> <a class="header-anchor" href="#actionitemprops" aria-label="Permalink to &quot;`ActionItemProps`&quot;">​</a></h4><p>操作菜单项默认类型，它继承了 <a href="#actionbasicprops">ActionBasicProps</a> 选项并添加了以下选项。</p><h5 id="text" tabindex="-1"><code>text</code> <a class="header-anchor" href="#text" aria-label="Permalink to &quot;`text`&quot;">​</a></h5><p>按钮显示文字。</p><ul><li>类型：<code>string</code>；</li><li>必选：否。</li></ul><h5 id="icon" tabindex="-1"><code>icon</code> <a class="header-anchor" href="#icon" aria-label="Permalink to &quot;`icon`&quot;">​</a></h5><p>左侧图标。</p><ul><li>类型：<code>string | VNode</code>；</li><li>必选：否。</li></ul><h5 id="trailingicon" tabindex="-1"><code>trailingIcon</code> <a class="header-anchor" href="#trailingicon" aria-label="Permalink to &quot;`trailingIcon`&quot;">​</a></h5><p>右侧图标。</p><ul><li>类型：<code>string | VNode</code>；</li><li>必选：否。</li></ul><h5 id="hint" tabindex="-1"><code>hint</code> <a class="header-anchor" href="#hint" aria-label="Permalink to &quot;`hint`&quot;">​</a></h5><p>鼠标悬浮提示文案。</p><ul><li>类型：<code>string</code>；</li><li>必选：否。</li></ul><h5 id="url" tabindex="-1"><code>url</code> <a class="header-anchor" href="#url" aria-label="Permalink to &quot;`url`&quot;">​</a></h5><p>跳转链接地址。</p><ul><li>类型：<code>string</code>；</li><li>必选：否。</li></ul><h5 id="target" tabindex="-1"><code>target</code> <a class="header-anchor" href="#target" aria-label="Permalink to &quot;`target`&quot;">​</a></h5><p>在何处打开链接地址。</p><ul><li>类型：<code>string</code>；</li><li>必选：否；</li><li>可选项： 参考 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a#attr-target" target="_blank" rel="noreferrer">MDN 中 <code>&lt;a&gt;</code> 属性</a> 。</li></ul><h5 id="disabled" tabindex="-1"><code>disabled</code> <a class="header-anchor" href="#disabled" aria-label="Permalink to &quot;`disabled`&quot;">​</a></h5><p>是否禁用。</p><ul><li>类型：<code>boolean</code>；</li><li>必选：否；</li><li>默认： <code>false</code>。</li></ul><h5 id="active" tabindex="-1"><code>active</code> <a class="header-anchor" href="#active" aria-label="Permalink to &quot;`active`&quot;">​</a></h5><p>是否是激活状态。</p><ul><li>类型：<code>boolean</code>；</li><li>必选：否；</li><li>默认： <code>false</code>。</li></ul><h4 id="actionspaceprops" tabindex="-1"><code>ActionSpaceProps</code> <a class="header-anchor" href="#actionspaceprops" aria-label="Permalink to &quot;`ActionSpaceProps`&quot;">​</a></h4><p>在<a href="#actionbasicprops">ActionBasicProps</a> 的基础上定义了 <code>type</code> 属性。</p><h5 id="type-2" tabindex="-1"><code>type</code> <a class="header-anchor" href="#type-2" aria-label="Permalink to &quot;`type`&quot;">​</a></h5><p>item 为间距时的类型。</p><ul><li>类型：<code>string</code>；</li><li>属性值：<code>space</code>。</li></ul><h5 id="space" tabindex="-1"><code>space</code> <a class="header-anchor" href="#space" aria-label="Permalink to &quot;`space`&quot;">​</a></h5><p>调整 space 间距大小。</p><ul><li>类型：<code>number | [leading: number, trailing: number]</code>；</li><li>必选：否。</li></ul><h5 id="flex" tabindex="-1"><code>flex</code> <a class="header-anchor" href="#flex" aria-label="Permalink to &quot;`flex`&quot;">​</a></h5><p>用于控制 flex 项目放大和缩小。</p><ul><li>类型：<code>number | &#39;auto&#39; | &#39;none&#39;</code>；</li><li>必选：否。</li></ul><h4 id="actionheadingprops" tabindex="-1"><code>ActionHeadingProps</code> <a class="header-anchor" href="#actionheadingprops" aria-label="Permalink to &quot;`ActionHeadingProps`&quot;">​</a></h4><p>在<a href="#actionbasicprops">ActionBasicProps</a> 的基础上定义了其他选项。</p><h5 id="type-3" tabindex="-1"><code>type</code> <a class="header-anchor" href="#type-3" aria-label="Permalink to &quot;`type`&quot;">​</a></h5><p>item 为自定义时的类型。</p><ul><li>类型：<code>string</code>；</li><li>属性值：<code>heading</code>。</li></ul><h5 id="text-1" tabindex="-1"><code>text</code> <a class="header-anchor" href="#text-1" aria-label="Permalink to &quot;`text`&quot;">​</a></h5><p>标题。</p><ul><li>类型：<code>string</code>；</li><li>属性值：<code>heading</code>。</li></ul><h4 id="actioncustomprops" tabindex="-1"><code>ActionCustomProps</code> <a class="header-anchor" href="#actioncustomprops" aria-label="Permalink to &quot;`ActionCustomProps`&quot;">​</a></h4><p>在<a href="#actionbasicprops">ActionBasicProps</a> 的基础上定义了 <code>type</code> 属性。</p><h5 id="type-4" tabindex="-1"><code>type</code> <a class="header-anchor" href="#type-4" aria-label="Permalink to &quot;`type`&quot;">​</a></h5><p>item 为自定义时的类型。</p><ul><li>类型：<code>string</code>；</li><li>属性值：<code>custom</code>。</li></ul>',123);function f(t,s,P,_,v,A){const o=r("Example");return i(),E("div",null,[y,h,u,m,l(o,null,{default:e(()=>[F]),_:1}),b,l(o,{class:"flex gap-4"},{default:e(()=>[g]),_:1}),C,l(o,null,{default:e(()=>[k]),_:1}),B,l(o,null,{default:e(()=>[q]),_:1}),x])}const T=c(d,[["render",f]]);export{I as __pageData,T as default};
