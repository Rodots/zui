import{_ as s,o as e,c as a,g as n}from"./app.6d1258fa.js";const u=JSON.parse('{"title":"本地存储","description":"","frontmatter":{},"headers":[{"level":2,"title":"引入","slug":"引入","link":"#引入","children":[]},{"level":2,"title":"综合示例","slug":"综合示例","link":"#综合示例","children":[]},{"level":2,"title":"存储数据","slug":"存储数据","link":"#存储数据","children":[]},{"level":2,"title":"读取数据","slug":"读取数据","link":"#读取数据","children":[]},{"level":2,"title":"移除数据","slug":"移除数据","link":"#移除数据","children":[]},{"level":2,"title":"遍历数据","slug":"遍历数据","link":"#遍历数据","children":[]},{"level":2,"title":"获取所有数据","slug":"获取所有数据","link":"#获取所有数据","children":[]},{"level":2,"title":"操作本地会话数据","slug":"操作本地会话数据","link":"#操作本地会话数据","children":[]},{"level":2,"title":"创建独立的读写实例","slug":"创建独立的读写实例","link":"#创建独立的读写实例","children":[]},{"level":2,"title":"API","slug":"api","link":"#api","children":[{"level":3,"title":"C Store","slug":"c-store","link":"#c-store","children":[]},{"level":3,"title":"F Store.set(key, value)","slug":"f-store-set-key-value","link":"#f-store-set-key-value","children":[]},{"level":3,"title":"F Store.get(key, defaultValue)","slug":"f-store-get-key-defaultvalue","link":"#f-store-get-key-defaultvalue","children":[]},{"level":3,"title":"F Store.remove(key)","slug":"f-store-remove-key","link":"#f-store-remove-key","children":[]},{"level":3,"title":"F Store.each(callback)","slug":"f-store-each-callback","link":"#f-store-each-callback","children":[]},{"level":3,"title":"F Store.getAll()","slug":"f-store-getall","link":"#f-store-getall","children":[]},{"level":3,"title":"T StoreType","slug":"t-storetype","link":"#t-storetype","children":[]},{"level":3,"title":"V store","slug":"v-store","link":"#v-store","children":[]},{"level":3,"title":"F StoreCreateFunc","slug":"f-storecreatefunc","link":"#f-storecreatefunc","children":[]}]}],"relativePath":"lib/helpers/store/index.md","lastUpdated":null}'),t={name:"lib/helpers/store/index.md"},l=n(`<h1 id="本地存储" tabindex="-1">本地存储 <a class="header-anchor" href="#本地存储" aria-hidden="true">#</a></h1><p>本地存储（Local storage）是在浏览器本地存储应用数据的好途径。相比较 cookie 拥有更大的存储空间（相同域下一般达到 5M 以上存储空间），使用更灵活，而且不会在每次提交中发送到服务器。几乎所有浏览器都支持本地存储，甚至包括 IE。</p><p>本地存储包括尺寸存储和会话存储，对应的是浏览器内置的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage" target="_blank" rel="noreferrer"><code>localStorage</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage" target="_blank" rel="noreferrer"><code>sessionStorage</code></a>。</p><p>此 JS 插件提供了一系列方法用于读写本地存储数据。相比较直接使用这些浏览器原生接口，<code>Store</code> 类在读写数据时会自动进行转换，所以你可以存储任何可以被系列化为 JSON 的数据，例如数值、数组和复杂对象，而不仅仅是字符串。</p><h2 id="引入" tabindex="-1">引入 <a class="header-anchor" href="#引入" aria-hidden="true">#</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">import</span><span style="color:#C9D1D9;"> {store} </span><span style="color:#FF7B72;">from</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;zui/store&#39;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><code>store</code> 为默认的持久存储管理实例，可以直接使用上面的各种方法进行数据操作。如需使用会话存储数据，则只需要通过 <code>store.session</code> 访问会话存储类型的管理实例即可。</p><h2 id="综合示例" tabindex="-1">综合示例 <a class="header-anchor" href="#综合示例" aria-hidden="true">#</a></h2><p>（待定：提供一个例子读取示例数据，并提供操作按钮让用户手动添加数据进行存储）</p><h2 id="存储数据" tabindex="-1">存储数据 <a class="header-anchor" href="#存储数据" aria-hidden="true">#</a></h2><p>存储数据使用 <code>Store</code> 实例上的 <code>set</code> 方法。</p><p><strong>示例</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">store.</span><span style="color:#D2A8FF;">set</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;mySecretCode&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">1314520</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="读取数据" tabindex="-1">读取数据 <a class="header-anchor" href="#读取数据" aria-hidden="true">#</a></h2><p>读取数据使用 <code>Store</code> 实例上的 <code>get</code> 方法。</p><p><strong>示例</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">store.</span><span style="color:#D2A8FF;">get</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;mySecretCode&#39;</span><span style="color:#C9D1D9;">); </span><span style="color:#8B949E;">// 基于存储数据的例子应该返回 1314520</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="移除数据" tabindex="-1">移除数据 <a class="header-anchor" href="#移除数据" aria-hidden="true">#</a></h2><p>读取数据使用 <code>Store</code> 实例上的 <code>remove</code> 方法。</p><p><strong>示例</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">store.</span><span style="color:#D2A8FF;">remove</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;mySecretCode&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="遍历数据" tabindex="-1">遍历数据 <a class="header-anchor" href="#遍历数据" aria-hidden="true">#</a></h2><p>遍历数据使用 <code>Store</code> 实例上的 <code>each</code> 方法。</p><p><strong>示例</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">store.</span><span style="color:#D2A8FF;">each</span><span style="color:#C9D1D9;">((</span><span style="color:#FFA657;">name</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">value</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> {</span></span>
<span class="line"><span style="color:#C9D1D9;">    console.</span><span style="color:#D2A8FF;">log</span><span style="color:#C9D1D9;">(name, </span><span style="color:#A5D6FF;">&#39;=&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;value&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="获取所有数据" tabindex="-1">获取所有数据 <a class="header-anchor" href="#获取所有数据" aria-hidden="true">#</a></h2><p>获取所有数据使用 <code>Store</code> 实例上的 <code>getAll</code> 方法。</p><p><strong>示例</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">store.</span><span style="color:#D2A8FF;">set</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;mySecretCode&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">1314520</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">store.</span><span style="color:#D2A8FF;">set</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;myName&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;Jue&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">store.</span><span style="color:#D2A8FF;">getAll</span><span style="color:#C9D1D9;">(); </span><span style="color:#8B949E;">// 返回 {mySecretCode: 1314520, myName: &#39;Jue&#39;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="操作本地会话数据" tabindex="-1">操作本地会话数据 <a class="header-anchor" href="#操作本地会话数据" aria-hidden="true">#</a></h2><p>要操作此次会话在本地的数据可以通过 <code>store.session</code> 实例上的方法。</p><p><strong>示例</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#C9D1D9;">store.session.</span><span style="color:#D2A8FF;">set</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;mySecretCode&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">1314520</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">store.session.</span><span style="color:#D2A8FF;">set</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;myName&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#A5D6FF;">&#39;Jue&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C9D1D9;">store.session.</span><span style="color:#D2A8FF;">getAll</span><span style="color:#C9D1D9;">(); </span><span style="color:#8B949E;">// 返回 {mySecretCode: 1314520, myName: &#39;Jue&#39;}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>相比较本地存储，会话存储的数据会在浏览器会话结束时（例如浏览器被关闭）被清除。在会话期间，数据仍然可以跨页面访问。</p></div><h2 id="创建独立的读写实例" tabindex="-1">创建独立的读写实例 <a class="header-anchor" href="#创建独立的读写实例" aria-hidden="true">#</a></h2><p>通常使用 <code>Store</code> 的默认实例 <code>store</code> 即可读写数据，但有时需要一个独立的存储实例，可以通过 <code>store.create</code> 方法创建一个 <code>Store</code> 实例实现。</p><p><strong>示例</strong></p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#8B949E;">/* 分别创建一个本地存储和会话存储实例 */</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">myStore</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> store.</span><span style="color:#D2A8FF;">create</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;myStore&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#FF7B72;">const</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">mySessionStore</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> store.</span><span style="color:#D2A8FF;">create</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;mySessionStore&#39;</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">/* 分别设置同名的存储的值 */</span></span>
<span class="line"><span style="color:#C9D1D9;">store.</span><span style="color:#D2A8FF;">set</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;mySecretCode&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">1</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">myStore.</span><span style="color:#D2A8FF;">set</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;mySecretCode&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">2</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"><span style="color:#C9D1D9;">mySessionStore.</span><span style="color:#D2A8FF;">set</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;mySecretCode&#39;</span><span style="color:#C9D1D9;">, </span><span style="color:#79C0FF;">3</span><span style="color:#C9D1D9;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#8B949E;">/* 他们可以读取到同名的各自的值 */</span></span>
<span class="line"><span style="color:#C9D1D9;">store.</span><span style="color:#D2A8FF;">get</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;mySecretCode&#39;</span><span style="color:#C9D1D9;">);          </span><span style="color:#8B949E;">// 返回 1</span></span>
<span class="line"><span style="color:#C9D1D9;">myStore.</span><span style="color:#D2A8FF;">get</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;mySecretCode&#39;</span><span style="color:#C9D1D9;">);        </span><span style="color:#8B949E;">// 返回 2</span></span>
<span class="line"><span style="color:#C9D1D9;">mySessionStore.</span><span style="color:#D2A8FF;">get</span><span style="color:#C9D1D9;">(</span><span style="color:#A5D6FF;">&#39;mySecretCode&#39;</span><span style="color:#C9D1D9;">); </span><span style="color:#8B949E;">// 返回 3</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-hidden="true">#</a></h2><h3 id="c-store" tabindex="-1"><span class="-text-purple-500 -font-mono -bg-purple-100 -px-2 -rounded">C</span> <span class="-text-purple-500 -font-mono">Store</span> <a class="header-anchor" href="#c-store" aria-hidden="true">#</a></h3><p><code>Store</code> 类。</p><p><strong>属性</strong></p><table><thead><tr><th>名称</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>type</code></td><td style="text-align:center;"><code>StoreType</code></td><td>存储类型</td></tr><tr><td><code>session</code></td><td style="text-align:center;"><code>Store</code></td><td>与当前存储同名的会话存储实例</td></tr></tbody></table><p><strong>方法</strong></p><table><thead><tr><th>方法名</th><th>定义</th></tr></thead><tbody><tr><td><code>get</code></td><td>获取数据</td></tr><tr><td><code>set</code></td><td>存储数据</td></tr><tr><td><code>remove</code></td><td>移除数据</td></tr><tr><td><code>each</code></td><td>遍历数据</td></tr><tr><td><code>getAll</code></td><td>获取所有数据</td></tr></tbody></table><h3 id="f-store-set-key-value" tabindex="-1"><span class="-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded">F</span> <span class="-text-blue-500 -font-mono">Store.set(key, value)</span> <a class="header-anchor" href="#f-store-set-key-value" aria-hidden="true">#</a></h3><p>存储数据。</p><p><strong>定义</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#D2A8FF;">set</span><span style="color:#C9D1D9;">(key: string, value: any) </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key</code></td><td style="text-align:center;"><code>string</code></td><td>存储的数据名称</td></tr><tr><td><code>value</code></td><td style="text-align:center;"><code>any</code></td><td>要存储的数据</td></tr></tbody></table><p><strong>方法</strong></p><h3 id="f-store-get-key-defaultvalue" tabindex="-1"><span class="-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded">F</span> <span class="-text-blue-500 -font-mono">Store.get(key, defaultValue)</span> <a class="header-anchor" href="#f-store-get-key-defaultvalue" aria-hidden="true">#</a></h3><p>读取数据。</p><p><strong>定义</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#D2A8FF;">get</span><span style="color:#C9D1D9;">(key: string, defaultValue</span><span style="color:#FF7B72;">?:</span><span style="color:#C9D1D9;"> any) </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> any;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key</code></td><td style="text-align:center;"><code>string</code></td><td>读取的数据名称</td></tr><tr><td><code>defaultValue</code></td><td style="text-align:center;"><code>any</code></td><td>当没有读取数据时返回此默认值</td></tr></tbody></table><p><strong>返回值</strong></p><table><thead><tr><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td style="text-align:center;"><code>any</code></td><td>读取到的数据</td></tr></tbody></table><h3 id="f-store-remove-key" tabindex="-1"><span class="-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded">F</span> <span class="-text-blue-500 -font-mono">Store.remove(key)</span> <a class="header-anchor" href="#f-store-remove-key" aria-hidden="true">#</a></h3><p>移除数据</p><p><strong>定义</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#D2A8FF;">remove</span><span style="color:#C9D1D9;">(key: string) </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>key</code></td><td style="text-align:center;"><code>string</code></td><td>要移除的数据名称</td></tr></tbody></table><h3 id="f-store-each-callback" tabindex="-1"><span class="-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded">F</span> <span class="-text-blue-500 -font-mono">Store.each(callback)</span> <a class="header-anchor" href="#f-store-each-callback" aria-hidden="true">#</a></h3><p>遍历数据。</p><p><strong>定义</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#D2A8FF;">each</span><span style="color:#C9D1D9;">(callback: (</span><span style="color:#FFA657;">name</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">string</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">value</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">any</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">void</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>callback</code></td><td style="text-align:center;"><code>function</code></td><td>遍历回调函数</td></tr></tbody></table><p>其中 <code>callback</code> 参数：</p><table><thead><tr><th>参数</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>name</code></td><td style="text-align:center;"><code>string</code></td><td>本次遍历存储的名称</td></tr><tr><td><code>value</code></td><td style="text-align:center;"><code>any</code></td><td>本次遍历存储的值</td></tr></tbody></table><h3 id="f-store-getall" tabindex="-1"><span class="-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded">F</span> <span class="-text-blue-500 -font-mono">Store.getAll()</span> <a class="header-anchor" href="#f-store-getall" aria-hidden="true">#</a></h3><p>获取所有存储的数据。</p><p><strong>定义</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#D2A8FF;">getAll</span><span style="color:#C9D1D9;">() </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> Record</span><span style="color:#FF7B72;">&lt;</span><span style="color:#C9D1D9;">string, any</span><span style="color:#FF7B72;">&gt;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>返回值</strong></p><table><thead><tr><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td style="text-align:center;"><code>Record&lt;string, any&gt;</code></td><td>通过一个对象返回所有存储的数据，对象的属性名和值分别对应存储的名称和值</td></tr></tbody></table><h3 id="t-storetype" tabindex="-1"><span class="-text-green-500 -font-mono -bg-green-100 -px-2 -rounded">T</span> <span class="-text-green-500 -font-mono">StoreType</span> <a class="header-anchor" href="#t-storetype" aria-hidden="true">#</a></h3><p>本地存储类型。</p><p><strong>定义</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">type</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">StoreType</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;local&#39;</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">|</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;session&#39;</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>常量定义</strong></p><table><thead><tr><th>值</th><th>定义</th></tr></thead><tbody><tr><td><code>&#39;local&#39;</code></td><td>本地持久存储</td></tr><tr><td><code>&#39;session&#39;</code></td><td>本地会话存储</td></tr></tbody></table><h3 id="v-store" tabindex="-1"><span class="-text-yellow-500 -font-mono -bg-yellow-100 -px-2 -rounded">V</span> <span class="-text-yellow-500 -font-mono">store</span> <a class="header-anchor" href="#v-store" aria-hidden="true">#</a></h3><p>默认的 store 实例，并包含用于创建新的 <code>Store</code> 实例的快捷方法。</p><p><strong>定义</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">var</span><span style="color:#C9D1D9;"> store</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Store</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">&amp;</span><span style="color:#C9D1D9;"> {</span><span style="color:#FFA657;">create</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">StoreCreateFunc</span><span style="color:#C9D1D9;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>其中 <code>create</code> 成员为创建 <code>Store</code> 实例的快捷方法。</p><h3 id="f-storecreatefunc" tabindex="-1"><span class="-text-blue-500 -font-mono -bg-blue-100 -px-2 -rounded">F</span> <span class="-text-blue-500 -font-mono">StoreCreateFunc</span> <a class="header-anchor" href="#f-storecreatefunc" aria-hidden="true">#</a></h3><p><code>Store</code> 实例创建方法。</p><p><strong>定义</strong></p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#FF7B72;">type</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">StoreCreateFunc</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> (</span><span style="color:#FFA657;">name</span><span style="color:#FF7B72;">?:</span><span style="color:#C9D1D9;"> </span><span style="color:#79C0FF;">string</span><span style="color:#C9D1D9;">, </span><span style="color:#FFA657;">type</span><span style="color:#FF7B72;">:</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">StoreType</span><span style="color:#C9D1D9;"> </span><span style="color:#FF7B72;">=</span><span style="color:#C9D1D9;"> </span><span style="color:#A5D6FF;">&#39;local&#39;</span><span style="color:#C9D1D9;">) </span><span style="color:#FF7B72;">=&gt;</span><span style="color:#C9D1D9;"> </span><span style="color:#FFA657;">Store</span><span style="color:#C9D1D9;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>参数</strong></p><table><thead><tr><th>参数</th><th style="text-align:center;">类型</th><th>定义</th></tr></thead><tbody><tr><td><code>name</code></td><td style="text-align:center;"><code>string</code></td><td>本地存储实例名称</td></tr><tr><td><code>type</code></td><td style="text-align:center;"><code>StoreType</code></td><td>存储类型，默认为 <code>&#39;local&#39;</code></td></tr></tbody></table>`,97),o=[l];function p(r,c,d,i,y,h){return e(),a("div",null,o)}const b=s(t,[["render",p]]);export{u as __pageData,b as default};
