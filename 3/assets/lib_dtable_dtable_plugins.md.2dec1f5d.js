import{_ as o,H as e,o as t,c,J as l,C as s,a,V as p}from"./chunks/framework.5abe4bce.js";const $=JSON.parse('{"title":"数据表格插件","description":"","frontmatter":{},"headers":[],"relativePath":"lib/dtable/dtable/plugins.md","filePath":"lib/dtable/dtable/plugins.md","lastUpdated":null}'),E={name:"lib/dtable/dtable/plugins.md"},r=s("h1",{id:"数据表格插件",tabindex:"-1"},[a("数据表格插件 "),s("a",{class:"header-anchor",href:"#数据表格插件","aria-label":'Permalink to "数据表格插件"'},"​")],-1),y=s("h2",{id:"富格式插件-rich",tabindex:"-1"},[a("富格式插件 "),s("code",null,"rich"),a(),s("a",{class:"header-anchor",href:"#富格式插件-rich","aria-label":'Permalink to "富格式插件 `rich`"'},"​")],-1),i=p(`<p>让单元格支持展示丰富格式内容，包括链接、格式化字符串、HTML、迷你进度条以及时间日期等。</p><h3 id="链接" tabindex="-1">链接 <a class="header-anchor" href="#链接" aria-label="Permalink to &quot;链接&quot;">​</a></h3><p>在列定义上通过 <code>link</code> 属性设置单元格内容作为链接显示，支持以下值：</p><ul><li><code>string</code>：使用模版字符串来生成链接；</li><li><code>{url: string} &amp; JSX.HTMLAttributes&lt;HTMLAnchorElement&gt;</code>：使用对象来生成链接，对象中的其他属性将作为链接的属性；</li><li><code>((info: {row: RowInfo, col: ColInfo}) =&gt; string | ({url: string} &amp; JSX.HTMLAttributes&lt;HTMLAnchorElement&gt;))</code>：使用函数来动态生成链接。</li></ul><p>下面为一个实际的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cols</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;项目名称&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用字符串进行格式化，{0} 表示单元格的原始值。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        link: </span><span style="color:#9ECBFF;">&#39;https://example.com/{0}&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;url&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;链接&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用对象来生成链接，对象中的其他属性将作为链接的属性。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        link: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            url: </span><span style="color:#9ECBFF;">&#39;https://example.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            target: </span><span style="color:#9ECBFF;">&#39;_blank&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;actions&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;操作&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用函数动态生成链接。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">link</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> {</span><span style="color:#79B8FF;">row</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">col</span><span style="color:#E1E4E8;">} </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> info;</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">                url: </span><span style="color:#9ECBFF;">\`https://example.com/\${</span><span style="color:#E1E4E8;">row</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">id</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">                target: </span><span style="color:#9ECBFF;">&#39;_blank&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            };</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div><h3 id="格式化字符串" tabindex="-1">格式化字符串 <a class="header-anchor" href="#格式化字符串" aria-label="Permalink to &quot;格式化字符串&quot;">​</a></h3><p>在列定义上通过 <code>format</code> 属性设置单元格格式化字符串，支持以下值：</p><ul><li><code>string</code>：通过字符串模版来格式化单元格内容；</li><li><code>(value: any, info: {row: any, col: ColInfo}) =&gt; string</code>：通过函数来动态生成单元格内容。</li></ul><p>下面为一个实际的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cols</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;项目名称&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用字符串进行格式化，{0} 表示单元格的原始值。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        format: </span><span style="color:#9ECBFF;">&#39;project：{0}&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;category&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;分类&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用函数动态生成文本。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;无分类&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> value),</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;product&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;产品&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用字符串进行格式化，{name} 表示单元格的原始值对象中的 name 属性。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        format: </span><span style="color:#9ECBFF;">&#39;#{id} {name}&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div><h3 id="从对象映射" tabindex="-1">从对象映射 <a class="header-anchor" href="#从对象映射" aria-label="Permalink to &quot;从对象映射&quot;">​</a></h3><p>在列定义上通过 <code>map</code> 属性设置一个对象或函数来从单元格实际值映射要显示的文本，支持如下值：</p><ul><li><code>Record&lt;string, string&gt;</code>：使用对象来进行映射，对象的键为单元格实际值，值为要显示的文本；</li><li><code>(value: any, info: {row: any, col: ColInfo}) =&gt; string</code>：使用函数来动态生成要显示的文本。</li></ul><p>下面为一个实际的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cols</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;status&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;状态&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用对象进行映射。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        map: {</span></span>
<span class="line"><span style="color:#E1E4E8;">            wait: </span><span style="color:#9ECBFF;">&#39;未开始&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            doing: </span><span style="color:#9ECBFF;">&#39;进行中&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">            done: </span><span style="color:#9ECBFF;">&#39;已完成&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;category&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;分类&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用函数动态生成文本。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">map</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> (value </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;无分类&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> value),</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;product&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;产品&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div><h3 id="以-html-进行渲染" tabindex="-1">以 HTML 进行渲染 <a class="header-anchor" href="#以-html-进行渲染" aria-label="Permalink to &quot;以 HTML 进行渲染&quot;">​</a></h3><p>在列定义上通过 <code>html</code> 属性设置单元格内容作为 HTML 显示，支持以下值：</p><ul><li><code>true</code>：将单元格原始值直接作为 HTML 展示；</li><li><code>string</code>：使用字符串模版来生成最终的 HTML；</li><li><code>(value: any, info: {row: any, col: ColInfo}) =&gt; string</code>：使用函数来动态生成最终的 HTML。</li></ul><p>下面为一个实际的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cols</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;项目名称&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用字符串进行格式化，{0} 表示单元格的原始值。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        format: </span><span style="color:#9ECBFF;">&#39;&lt;strong class=&quot;text-primary&quot;&gt;{0}&lt;/strong&gt;&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;status&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;状态&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用函数动态生成 HTML。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">format</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`&lt;span class=&quot;label&quot;&gt;\${</span><span style="color:#E1E4E8;">value</span><span style="color:#9ECBFF;">}&lt;/span&gt;\`</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;actions&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;操作&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 将单元格原始值直接作为 HTML 展示。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        html: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div><h3 id="格式化日期时间" tabindex="-1">格式化日期时间 <a class="header-anchor" href="#格式化日期时间" aria-label="Permalink to &quot;格式化日期时间&quot;">​</a></h3><p>在列定义上通过 <code>formatDate</code> 属性设置单元格内容作为日期时间显示，支持以下值：</p><ul><li><code>true</code>：使用默认的 <code>&#39;[yyyy-]MM-dd hh:mm&#39;</code> 进行格式化；</li><li><code>string</code>：使用字符串模版来格式化日期时间；</li><li><code>(value: any, info: {row: any, col: ColInfo}) =&gt; string</code>：使用函数来动态生成日期时间。</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>要让格式化日期时间生效，确保对应单元格的原始值为日期时间类型或者可以转换为日期时间的字符串或时间戳。</p></div><p>下面为一个实际的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cols</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;createdAt&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;创建时间&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用字符串进行格式化，{0} 表示单元格的原始值。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        formatDate: </span><span style="color:#9ECBFF;">&#39;yyyy-MM-dd&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;updatedAt&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;更新时间&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用函数动态生成日期时间。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">formatDate</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">info</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">date</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Date</span><span style="color:#E1E4E8;">(value);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">date</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">getFullYear</span><span style="color:#9ECBFF;">()</span><span style="color:#9ECBFF;">}-\${</span><span style="color:#E1E4E8;">date</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">getMonth</span><span style="color:#9ECBFF;">() </span><span style="color:#F97583;">+</span><span style="color:#9ECBFF;"> </span><span style="color:#79B8FF;">1</span><span style="color:#9ECBFF;">}-\${</span><span style="color:#E1E4E8;">date</span><span style="color:#9ECBFF;">.</span><span style="color:#B392F0;">getDate</span><span style="color:#9ECBFF;">()</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        },</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;actionsTime&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;操作时间&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 使用默认的格式化方式。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        formatDate: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div><h3 id="环形进度条" tabindex="-1">环形进度条 <a class="header-anchor" href="#环形进度条" aria-label="Permalink to &quot;环形进度条&quot;">​</a></h3><p>在列定义上设置 <code>type: &#39;progress&#39;</code> 来将单元格渲染为一个迷你的环形进度条。另外支持通过如下列定义上配置的属性来自定义进度条：</p><ul><li><code>circleSize: number</code>：环形直径，默认为 <code>24</code>；</li><li><code>circleBgColor: string</code>：环形背景颜色，默认为 <code>&#39;var(--color-border)&#39;</code>；</li><li><code>circleColor: string</code>：设置环形进度颜色，默认为 <code>&#39;var(--color-success-500)&#39;</code>；</li><li><code>circleBorderSize: number</code>：设置环形边框大小，默认为 <code>1</code>。</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>要使用环形进度条确保对应单元格的原始值为数值类型或者可以转换为数值的字符串。</p></div><p>下面为一个实际的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cols</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;progress&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;进度&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 将单元格渲染为环形进度条。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&#39;progress&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 自定义环形进度条的样式。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        circleSize: </span><span style="color:#79B8FF;">32</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        circleColor: </span><span style="color:#9ECBFF;">&#39;var(--color-primary-500)&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        circleBorderSize: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div><h2 id="按列排序-sort-type" tabindex="-1">按列排序 <code>sort-type</code> <a class="header-anchor" href="#按列排序-sort-type" aria-label="Permalink to &quot;按列排序 \`sort-type\`&quot;">​</a></h2>`,34),d=p(`<p>设置表格支持按列进行排序，在特定列上通过 <code>sortType</code> 属性启用列排序，列头将根据排序类型显示为链接，用户点击后可以更新表格。该插件为内置插件，无需手动引入即可使用。</p><h3 id="指定列的排序状态" tabindex="-1">指定列的排序状态 <a class="header-anchor" href="#指定列的排序状态" aria-label="Permalink to &quot;指定列的排序状态&quot;">​</a></h3><p>在列定义上通过 <code>sortType</code> 属性设置列排序类型，支持以下值：</p><ul><li><code>&#39;asc&#39;</code>：该列当前以按升序排序，点击后将按降序排序；</li><li><code>&#39;desc&#39;</code>：该列当前以按降序排序，点击后将按升序排序；</li><li><code>true</code>：该列支持排序，但没有进行排序，点击后将按升序排序；</li><li><code>false</code> 或 <code>undefined</code>：该列不支持排序。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cols</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;ID&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        sortType: </span><span style="color:#9ECBFF;">&#39;asc&#39;</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 该列当前以按升序排序</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;产品名称&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        sortType: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">   </span><span style="color:#6A737D;">// 该列支持排序，但没有进行排序</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;actions&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;actions&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        sortType: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 该列不支持排序</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div><h3 id="指定列排序链接" tabindex="-1">指定列排序链接 <a class="header-anchor" href="#指定列排序链接" aria-label="Permalink to &quot;指定列排序链接&quot;">​</a></h3><p>通过 <code>sortLink</code> 属性设置列排序链接，支持以下值：</p><ul><li><code>string</code>：通过字符串模版来设置排序链接；</li><li><code>(col: ColInfo, sortType: string) =&gt; ColSortType</code>：通过函数来动态生成该列的排序链接。</li></ul><p>当通过字符串模版来设置排序链接时，可以在字符串模版中使用如下动态字段：</p><ul><li><code>&quot;{sortType}&quot;</code>：当前排序类型；</li><li><code>&quot;{name}&quot;</code>：当前列名称。</li></ul><p>下面为一个例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cols</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;id&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;ID&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        sortType: </span><span style="color:#9ECBFF;">&#39;asc&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 通过字符串模版来设置排序链接 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        sortLink: </span><span style="color:#9ECBFF;">&#39;/?sortBy=id&amp;type={sortType}&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;name&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;产品名称&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        sortType: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 通过函数来动态生成排序链接 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#B392F0;">sortLink</span><span style="color:#E1E4E8;">: (</span><span style="color:#FFAB70;">col</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sortType</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`/?sortBy=\${</span><span style="color:#E1E4E8;">col</span><span style="color:#9ECBFF;">.</span><span style="color:#E1E4E8;">name</span><span style="color:#9ECBFF;">}&amp;type=\${</span><span style="color:#E1E4E8;">sortType</span><span style="color:#9ECBFF;">}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div><h3 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h3><h4 id="列排序类型" tabindex="-1">列排序类型 <a class="header-anchor" href="#列排序类型" aria-label="Permalink to &quot;列排序类型&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#6A737D;">/* 列排序类型 */</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ColSortType</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;asc&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;desc&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boolean</span><span style="color:#E1E4E8;">;</span></span></code></pre></div><h4 id="列定义配置" tabindex="-1">列定义配置 <a class="header-anchor" href="#列定义配置" aria-label="Permalink to &quot;列定义配置&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PluginColSetting</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 列排序类型 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">sortType</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ColSortType</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 列排序链接模版或生成函数 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">sortLink</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ((</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DTableSortType</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">col</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ColInfo</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">nextSortType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ColSortType</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">currentSortType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ColSortType</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 列排序链接元素上的其他属性，可以指定为函数动态生成 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">sortAttrs</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSX</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">HTMLAttributes</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ((</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DTableSortType</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">col</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ColInfo</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">sortType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ColSortType</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">JSX</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">HTMLAttributes</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h4 id="表格初始化选项" tabindex="-1">表格初始化选项 <a class="header-anchor" href="#表格初始化选项" aria-label="Permalink to &quot;表格初始化选项&quot;">​</a></h4><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">PluginDTableOptions</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 列排序链接模版或生成函数 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#FFAB70;">sortLink</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> ((</span><span style="color:#79B8FF;">this</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">DTableSortType</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">col</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ColInfo</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">nextSortType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ColSortType</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">currentSortType</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ColSortType</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre></div><h2 id="头像-avatar" tabindex="-1">头像 <code>avatar</code> <a class="header-anchor" href="#头像-avatar" aria-label="Permalink to &quot;头像 \`avatar\`&quot;">​</a></h2>`,20),F=p(`<p>设置表格支持在单元格内显示头像，通过在列定义上设置 <code>avatar</code> 属性或 <code>avatarBtn</code> 属性来启用该功能。该插件为内置插件，无需手动引入即可使用。</p><h3 id="显示为头像" tabindex="-1">显示为头像 <a class="header-anchor" href="#显示为头像" aria-label="Permalink to &quot;显示为头像&quot;">​</a></h3><p>在列定义上设置 <code>type: &#39;avatar&#39;</code> 来将单元格渲染为一个头像。另外支持通过如下属性来自定义头像：</p><ul><li><code>avatarClass: string</code>：头像元素上的 CSS 类名；</li><li><code>avatarKey: string</code>：用于从行数据对象上获取头像图片地址的属性名；</li><li><code>avatarCodeKey: string</code>：用于从行数据对象上获取头像 Code 的属性名；</li><li><code>avatarNameKey: string</code>：用于从行数据对象上获取头像名称的属性名。</li><li><code>avatarProps: Partial&lt;AvatarProps&gt; | ((row: RowInfo) =&gt; Partial&lt;AvatarProps&gt;)</code>：用于指定头像其他属性，或者通过函数动态返回。</li></ul><p>下面为一个实际的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cols</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;manager&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;产品经理&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 将单元格渲染为头像。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&#39;avatar&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 从 managerAvatar 属性上获取当前头像的图片路径。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        avatarKey: </span><span style="color:#9ECBFF;">&#39;managerAvatar&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 从 managerAvatar 属性上获取当前头像的图片路径。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        avatarNameKey: </span><span style="color:#9ECBFF;">&#39;managerName&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div><h3 id="显示为头像和名称" tabindex="-1">显示为头像和名称 <a class="header-anchor" href="#显示为头像和名称" aria-label="Permalink to &quot;显示为头像和名称&quot;">​</a></h3><p>在列定义上设置 <code>type: &#39;avatarName&#39;</code> 来将单元格渲染为一个头像和名称形式。支持列类型 <code>type: &#39;avatar&#39;</code> 上支持的所有属性。下面为一个实际的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cols</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;manager&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;产品经理&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 将单元格渲染为头像和名称。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&#39;avatarName&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 从 managerAvatar 属性上获取当前头像的图片路径。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        avatarKey: </span><span style="color:#9ECBFF;">&#39;managerAvatar&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 从 managerAvatar 属性上获取当前头像的图片路径。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        avatarNameKey: </span><span style="color:#9ECBFF;">&#39;managerName&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div><h3 id="显示为头像按钮" tabindex="-1">显示为头像按钮 <a class="header-anchor" href="#显示为头像按钮" aria-label="Permalink to &quot;显示为头像按钮&quot;">​</a></h3><p>在列定义上设置 <code>type: &#39;avatarBtn&#39;</code> 来将单元格渲染为一个头像。除了支持列类型 <code>type: &#39;avatar&#39;</code> 上支持的所有属性外，还支持通过 <code>btnProps</code> 属性来设置按钮元素上的其他属性，下面为一个实际的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">cols</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span></span>
<span class="line"><span style="color:#E1E4E8;">    {</span></span>
<span class="line"><span style="color:#E1E4E8;">        name: </span><span style="color:#9ECBFF;">&#39;manager&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        title: </span><span style="color:#9ECBFF;">&#39;产品经理&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 将单元格渲染为头像按钮。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        type: </span><span style="color:#9ECBFF;">&#39;avatarBtn&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 从 managerAvatar 属性上获取当前头像的图片路径。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        avatarKey: </span><span style="color:#9ECBFF;">&#39;managerAvatar&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 从 managerAvatar 属性上获取当前头像的图片路径。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        avatarNameKey: </span><span style="color:#9ECBFF;">&#39;managerName&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">/* 设置按钮元素上的 CSS 类。 */</span></span>
<span class="line"><span style="color:#E1E4E8;">        avatarBtnProps: {className: </span><span style="color:#9ECBFF;">&#39;primary&#39;</span><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">];</span></span></code></pre></div><h2 id="列鼠标悬停效果-col-hover" tabindex="-1">列鼠标悬停效果 <code>col-hover</code> <a class="header-anchor" href="#列鼠标悬停效果-col-hover" aria-label="Permalink to &quot;列鼠标悬停效果 \`col-hover\`&quot;">​</a></h2>`,13),h=p(`<p>设置表格支持在鼠标悬停在列上时，高亮该列。该插件为内置插件，无需手动引入即可使用。</p><h3 id="启用列鼠标悬停效果" tabindex="-1">启用列鼠标悬停效果 <a class="header-anchor" href="#启用列鼠标悬停效果" aria-label="Permalink to &quot;启用列鼠标悬停效果&quot;">​</a></h3><p>通过在数据表格初始化选项 <code>colHover</code> 来启用列鼠标悬停效果，支持如下值：</p><ul><li><code>true</code>：启用鼠标悬停效果；</li><li><code>&#39;header&#39;</code>：仅当鼠标悬停在列头上时才高亮该列；</li><li><code>false</code>：禁用鼠标悬停效果。</li></ul><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">/* 启用列鼠标悬停效果 */</span></span>
<span class="line"><span style="color:#E1E4E8;">    colHover: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre></div><h2 id="多层级-nested" tabindex="-1">多层级 <code>nested</code> <a class="header-anchor" href="#多层级-nested" aria-label="Permalink to &quot;多层级 \`nested\`&quot;">​</a></h2>`,6),u=s("h2",{id:"行选中-checkable",tabindex:"-1"},[a("行选中 "),s("code",null,"checkable"),a(),s("a",{class:"header-anchor",href:"#行选中-checkable","aria-label":'Permalink to "行选中 `checkable`"'},"​")],-1),B=s("h2",{id:"操作栏-actions",tabindex:"-1"},[a("操作栏 "),s("code",null,"actions"),a(),s("a",{class:"header-anchor",href:"#操作栏-actions","aria-label":'Permalink to "操作栏 `actions`"'},"​")],-1),g=s("h2",{id:"底部工具栏-toolbar",tabindex:"-1"},[a("底部工具栏 "),s("code",null,"toolbar"),a(),s("a",{class:"header-anchor",href:"#底部工具栏-toolbar","aria-label":'Permalink to "底部工具栏 `toolbar`"'},"​")],-1),b=s("h2",{id:"底部分页栏-pager",tabindex:"-1"},[a("底部分页栏 "),s("code",null,"pager"),a(),s("a",{class:"header-anchor",href:"#底部分页栏-pager","aria-label":'Permalink to "底部分页栏 `pager`"'},"​")],-1),m=s("h2",{id:"拖放排序-sortable",tabindex:"-1"},[a("拖放排序 "),s("code",null,"sortable"),a(),s("a",{class:"header-anchor",href:"#拖放排序-sortable","aria-label":'Permalink to "拖放排序 `sortable`"'},"​")],-1),C=s("h2",{id:"表头分组-header-group",tabindex:"-1"},[a("表头分组 "),s("code",null,"header-group"),a(),s("a",{class:"header-anchor",href:"#表头分组-header-group","aria-label":'Permalink to "表头分组 `header-group`"'},"​")],-1),_=s("h2",{id:"拖放改变列宽-resize",tabindex:"-1"},[a("拖放改变列宽 "),s("code",null,"resize"),a(),s("a",{class:"header-anchor",href:"#拖放改变列宽-resize","aria-label":'Permalink to "拖放改变列宽 `resize`"'},"​")],-1),v=s("h2",{id:"上下文菜单-contextmenu",tabindex:"-1"},[a("上下文菜单 "),s("code",null,"contextmenu"),a(),s("a",{class:"header-anchor",href:"#上下文菜单-contextmenu","aria-label":'Permalink to "上下文菜单 `contextmenu`"'},"​")],-1),k=s("h2",{id:"快捷键-hotkey",tabindex:"-1"},[a("快捷键 "),s("code",null,"hotkey"),a(),s("a",{class:"header-anchor",href:"#快捷键-hotkey","aria-label":'Permalink to "快捷键 `hotkey`"'},"​")],-1),f=s("h2",{id:"鼠标移动事件支持-mousemove",tabindex:"-1"},[a("鼠标移动事件支持 "),s("code",null,"mousemove"),a(),s("a",{class:"header-anchor",href:"#鼠标移动事件支持-mousemove","aria-label":'Permalink to "鼠标移动事件支持 `mousemove`"'},"​")],-1),A=s("h2",{id:"拖放选择-selectable",tabindex:"-1"},[a("拖放选择 "),s("code",null,"selectable"),a(),s("a",{class:"header-anchor",href:"#拖放选择-selectable","aria-label":'Permalink to "拖放选择 `selectable`"'},"​")],-1),P=s("h2",{id:"过滤-filter",tabindex:"-1"},[a("过滤 "),s("code",null,"filter"),a(),s("a",{class:"header-anchor",href:"#过滤-filter","aria-label":'Permalink to "过滤 `filter`"'},"​")],-1),x=s("h2",{id:"拖放移动-moveable",tabindex:"-1"},[a("拖放移动 "),s("code",null,"moveable"),a(),s("a",{class:"header-anchor",href:"#拖放移动-moveable","aria-label":'Permalink to "拖放移动 `moveable`"'},"​")],-1),T=s("h2",{id:"数据网格-datagrid",tabindex:"-1"},[a("数据网格 "),s("code",null,"datagrid"),a(),s("a",{class:"header-anchor",href:"#数据网格-datagrid","aria-label":'Permalink to "数据网格 `datagrid`"'},"​")],-1),D=s("h2",{id:"编辑状态-draft",tabindex:"-1"},[a("编辑状态 "),s("code",null,"draft"),a(),s("a",{class:"header-anchor",href:"#编辑状态-draft","aria-label":'Permalink to "编辑状态 `draft`"'},"​")],-1),q=s("h2",{id:"可编辑-editable",tabindex:"-1"},[a("可编辑 "),s("code",null,"editable"),a(),s("a",{class:"header-anchor",href:"#可编辑-editable","aria-label":'Permalink to "可编辑 `editable`"'},"​")],-1),I=s("h2",{id:"历史记录-history",tabindex:"-1"},[a("历史记录 "),s("code",null,"history"),a(),s("a",{class:"header-anchor",href:"#历史记录-history","aria-label":'Permalink to "历史记录 `history`"'},"​")],-1),S=s("h2",{id:"自动滚动-autoscroll",tabindex:"-1"},[a("自动滚动 "),s("code",null,"autoscroll"),a(),s("a",{class:"header-anchor",href:"#自动滚动-autoscroll","aria-label":'Permalink to "自动滚动 `autoscroll`"'},"​")],-1);function j(L,M,N,W,H,V){const n=e("Badge");return t(),c("div",null,[r,y,l(n,{text:"内置插件"}),i,l(n,{text:"内置插件"}),d,l(n,{text:"内置插件"}),F,l(n,{text:"内置插件"}),h,l(n,{text:"WIP",type:"danger"}),u,l(n,{text:"WIP",type:"danger"}),B,l(n,{text:"WIP",type:"danger"}),g,l(n,{text:"WIP",type:"danger"}),b,l(n,{text:"WIP",type:"danger"}),m,l(n,{text:"WIP",type:"danger"}),C,l(n,{text:"WIP",type:"danger"}),_,l(n,{text:"WIP",type:"danger"}),v,l(n,{text:"WIP",type:"danger"}),k,l(n,{text:"WIP",type:"danger"}),f,l(n,{text:"WIP",type:"danger"}),A,l(n,{text:"WIP",type:"danger"}),P,l(n,{text:"WIP",type:"danger"}),x,l(n,{text:"WIP",type:"danger"}),T,l(n,{text:"WIP",type:"danger"}),D,l(n,{text:"WIP",type:"danger"}),q,l(n,{text:"WIP",type:"danger"}),I,l(n,{text:"WIP",type:"danger"}),S,l(n,{text:"WIP",type:"danger"})])}const K=o(E,[["render",j]]);export{$ as __pageData,K as default};
